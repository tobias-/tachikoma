buildscript {
    dependencies {
        classpath "io.ebean:ebean-gradle-plugin:11.5.1"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:3.0.0"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:1.7.0"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath 'com.netflix.nebula:gradle-lint-plugin:8.3.1'
        classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'
        classpath 'co.riiid:gradle-github-plugin:0.4.2'
        classpath 'net.researchgate:gradle-release:2.6.0'
    }
    repositories {
        mavenLocal()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/jetbrains/spek" }
        mavenCentral()
    }
}

apply plugin: 'java'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'nebula.lint'
apply plugin: 'net.researchgate.release'

def travisTag = System.getenv("TRAVIS_TAG") ?: ""

subprojects {
    apply plugin: 'idea'
    apply plugin: 'nebula.lint'

    buildscript {
        repositories {
            mavenLocal()
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
            maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
            maven { url "https://plugins.gradle.org/m2/" }
            mavenCentral()
        }
    }

    gradleLint.criticalRules = ['all-dependency', 'duplicate-dependency-class']
    gradleLint.rules = ['archaic-wrapper']

    configurations {
        compile.exclude(group: 'org.glassfish.hk2.external', module: 'javax.inject')
    }

    idea {
        module {
            outputDir = file('build/idea-out')
            testOutputDir = file('build/idea-testout')
        }
    }

    repositories {
        mavenLocal()
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
        mavenCentral()
    }

    sourceCompatibility = ext.java_version
    targetCompatibility = ext.java_version

    // Add better deprecation warnings
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        apply plugin: 'org.jlleitschuh.gradle.ktlint'
        apply plugin: "org.jmailen.kotlinter"
        apply plugin: 'org.junit.platform.gradle.plugin'

        kapt {
            useBuildCache = true
        }

        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
            //javaParameters = true   // Useful for reflection.
        }

        ktlint {
            debug = false
            verbose = true
            android = false
//            reporter = "checkstyle"
            ignoreFailures = false
        }

        dependencies {
            testCompile "org.jetbrains.spek:spek-api:$spek_version"
            testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile 'org.junit.platform:junit-platform-runner:1.0.2'
            testCompile "org.glassfish.hk2:hk2-locator:$hk2_version"
            testCompile "org.glassfish.hk2:hk2-utils:$hk2_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
        }
    }

    if (!travisTag.empty) {
        // Only activate when we're building a tag
        apply plugin: 'co.riiid.gradle'
        def githubApiToken = System.getenv("GITHUB_API_TOKEN") ?: ""
        github {
            owner = 'SourceForgery'
            repo = 'tachikoma'
            token = githubApiToken
            tagName = travisTag
            targetCommitish = 'master'
            name = "v${project.version}"
            assets = [
                    "tachikoma-webserver/build/distributions/tachikoma-webserver-${project.version}.tar",
                    "tachikoma-postfix-utils/build/distributions/tachikoma-postfix-utils-${project.version}.tar",
            ]
        }
    }

    tasks.withType(se.transmode.gradle.plugins.docker.DockerTask).all {
        project.group = "sourceforgery"

        def currentBranch = System.getenv("TRAVIS_BRANCH") ?: grgit.branch.current.name
        if (currentBranch == "master" && Boolean.valueOf(System.getenv("DOCKER_PUSH"))) {
            push = true
        }
        if (!travisTag.empty) {
            push = true
        }
    }
}

group 'com.sourceforgery.tachikoma'
